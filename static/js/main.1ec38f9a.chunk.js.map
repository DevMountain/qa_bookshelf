{"version":3,"sources":["Components/Header.js","Components/AddBook.js","Components/Book.js","Components/Bookshelf.js","Components/GenreSelector.js","Components/Booklist.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","AddBook","props","infoHandler","event","setState","target","name","value","state","title","author","genre","coverImg","this","addBook","onSubmit","e","type","placeholder","onChange","React","Component","Book","book","id","style","backgroundImage","backgroundSize","completed","onClick","completeBook","deleteBook","Bookshelf","bookMap","books","map","key","GenreSelector","handleChange","getGenre","require","nextId","App","getBooks","updateBookshelf","preventDefault","coverImd","push","filter","index","findIndex","splice","toggleComplete","bind","console","error","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1ec38f9a.chunk.js","sourcesContent":["import React from 'react';\nimport '../reset.css';\nimport './Header.css';\n\nfunction Header () {\n    return (\n        <div>\n            <header>\n                <p>Cozy Corona Bookshelf</p>\n                <p className=\"subtitle\">Keep track of books on your shelf that you now have time to read.</p>\n            </header>\n        </div>\n        )\n    }\n\n\nexport default Header;","import React from \"react\";\nimport '../reset.css';\nimport './AddBook.css';\n\nclass AddBook extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            title: '',\n            author: '',\n            genre: '',\n            coverImg: ''\n        }\n    }\n\n    infoHandler = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render(){\n        const {title, author, genre, coverImg} = this.state;\n        const {addBook} = this.props;\n        return(\n            <div className=\"add-form\">\n                <h1 className=\"right-pg-text right-pg-add\">Add a book<br/>to your bookshelf</h1>\n                <form\n                    onSubmit={e => {\n                        addBook(e, title, author, genre, coverImg)\n                        this.setState({\n                            title: \"\",\n                            author: \"\",\n                            genre: \"\",\n                            coverImg: \"\"\n                        })\n                    }}>\n                    <input \n                        name=\"title\"\n                        type=\"text\"\n                        placeholder=\"title\"\n                        onChange={(e) => this.infoHandler(e)}\n                        value={title}/>\n                    <input \n                        name=\"author\"\n                        type=\"text\"\n                        placeholder=\"author\"\n                        onChange={(e) => this.infoHandler(e)}\n                        value={author}/>\n                    <input \n                        name=\"genre\"\n                        type=\"text\"\n                        placeholder=\"genre\"\n                        onChange={(e) => this.infoHandler(e)}\n                        value={genre}/>\n                    <input \n                        name=\"coverImg\"\n                        type=\"text\"\n                        placeholder=\"cover Image URL (optional)\"\n                        onChange={(e) => this.infoHandler(e)}\n                        value={coverImg}/>\n                    <button>SUBMIT</button>\n\n                </form>        \n\n            </div>\n        )\n    }\n}\n\nexport default AddBook;","import React from 'react';\nimport \"../reset.css\";\nimport \"./Book.css\";\n\nconst Book = (props) => {\n    const {id, title, author} = props.book\n    const style = {\n        backgroundImage: \"url(\"+props.book.coverImg+\")\",\n        backgroundSize: \"100% 100%\",\n    }\n    return (\n        <div> {props.book.completed ? (\n            <div className=\"book-box\" style={style}>\n                <h1 className=\"book-done\">You finished {title}</h1>  \n                <div className=\"bk-done-container\">\n                    <button onClick={() => props.completeBook(id)}>RE-READ</button>\n                    <button onClick={() => props.deleteBook(id)}>DELETE</button>\n                </div>             \n            </div>\n        ) : (\n            <div className=\"book-box\" style={style}>\n                <div className=\"ttl-author-container\">\n                    <h1 className=\"book-title\">{title}</h1>\n                    <h2 className=\"book-author\">{author}</h2>\n                </div>\n                <div className=\"bk-btn-container\">\n                    <button onClick={() => props.completeBook(id)}>DONE</button>\n                    <button onClick={() => props.deleteBook(id)}>DELETE</button>\n                </div>\n            </div>\n        )}\n            \n        </div>\n    )\n}\n\nexport default Book;\n\n\n//Each book needs a delete and complete button. \n\n//I want to understand better what to pass as arguments when invoking these functions, and when to use () or (e) at start of arrow function.\n\n//Need conditional rendering for book if status is complete. I think that will live on App.js.","import React from 'react';\n// import axios from 'axios';\nimport './Bookshelf.css';\nimport Book from './Book';\n\nconst Bookshelf = (props) => {\n    const bookMap = props.books.map(book => {\n        return <Book\n                    key={book.id}\n                    book={book}\n                    completeBook={props.completeBook}\n                    deleteBook={props.deleteBook} />\n    })\n    return (\n        <div className=\"bookshelf\">\n            {bookMap}\n        </div>\n    )\n\n}\n\nexport default Bookshelf;","import React from \"react\";\nimport \"./GenreSelector.css\"\n// import express from \"express\";\n\nclass GenreSelector extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            genre: \"\"\n        }\n    }\n\n    handleChange = (e) => {\n        // e.preventDefault();\n        this.setState({\n            genre: e.target.value\n        })\n        // this.setState({\n        //     genre: \"\"\n        // })\n    }\n    \n    render(){\n        return (\n            <div>\n                <div className=\"genre-box\">\n                    <h1 className=\"right-pg-text right-pg-genre\">\n                       What genre are you <br/>in the mood for?</h1>\n                    <input \n                        className=\"input-fields\"\n                        name=\"genre\"\n                        type=\"text\"\n                        value={this.state.genre}\n                        //Do I need value? What would that mean?\n                        onChange={(e) => this.handleChange(e)}\n                        placeholder=\"genre\"/>\n                    <button\n                        onClick={(e) => {\n                            this.props.getGenre(this.state.genre)\n                            this.setState({genre: \"\"})\n                        }\n                        }\n                            >SUBMIT</button>\n                </div>\n    \n            </div>\n        )\n\n    }\n}\n\nexport default GenreSelector;\n\n//I'm trying to get the delete function to work when genre selector is active. Right now, it just refreshes the page and shows all the books. I tried to use e.preventDefault but it did nothing.","const books = require(\"../data/books.json\");\nlet nextId = 21;\n\nexport const getBooks = () => books;\n\nexport const getGenre = (genre) => books.filter((book) => book.genre === genre);\n\nexport const addBook = (book) => {\n  const { title, author, genre, coverImd } = book;\n  if (!title || !author || !genre) {\n    return null;\n  }\n  books.push({\n    id: nextId,\n    title,\n    author,\n    genre,\n    coverImd,\n    completed: false,\n  });\n  nextId++;\n  return books;\n};\n\nexport const deleteBook = (id) => {\n  const index = books.findIndex((book) => book.id === id);\n  if (index < 0) return null;\n  books.splice(index, 1);\n  return books;\n};\n\nexport const toggleComplete = (id) => {\n  const index = books.findIndex((book) => book.id === id);\n  if (index < 0) return null;\n  books[index].completed = !books[index].completed;\n  return books;\n};\n","import React from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport AddBook from \"./Components/AddBook\";\nimport Bookshelf from \"./Components/Bookshelf\";\nimport GenreSelector from \"./Components/GenreSelector\";\nimport {\n  addBook,\n  deleteBook,\n  getBooks,\n  getGenre,\n  toggleComplete,\n} from \"./Components/Booklist\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      books: [],\n    };\n    this.getBooks = this.getBooks.bind(this);\n    this.getGenre = this.getGenre.bind(this);\n    this.addBook = this.addBook.bind(this);\n    this.deleteBook = this.deleteBook.bind(this);\n    this.completeBook = this.completeBook.bind(this);\n    this.updateBookshelf = this.updateBookshelf.bind(this);\n  }\n\n  componentDidMount() {\n    this.getBooks();\n  }\n\n  updateBookshelf(books) {\n    if (books)\n      this.setState({\n        books: books,\n      });\n    else console.error(\"attempted updating with invalid book list\");\n  }\n\n  getBooks = () => {\n    this.updateBookshelf(getBooks());\n  };\n\n  //Look at this - is this right?\n  addBook = (e, title, author, genre, coverImg) => {\n    e.preventDefault();\n    this.updateBookshelf(addBook(title, author, genre, coverImg));\n  };\n\n  getGenre = (genre) => {\n    this.updateBookshelf(getGenre(genre));\n  };\n\n  deleteBook = (id) => {\n    this.updateBookshelf(deleteBook(id));\n  };\n\n  completeBook = (id) => {\n    this.updateBookshelf(toggleComplete(id));\n  };\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className='App'>\n        <div className='page'>\n          <Header />\n          <div className='under-header'>\n            <Bookshelf\n              completeBook={this.completeBook}\n              deleteBook={this.deleteBook}\n              books={this.state.books}\n            />\n            <div className='right-components'>\n              <GenreSelector\n                books={this.state.books}\n                getGenre={this.getGenre}\n              />\n              <AddBook addBook={this.addBook} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//The getGenre isn't working.\n\n//What's the e.preventDefault for?\n\n//Do I need to bind all those functions? I know they're arrow functions. Does it matter?\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}